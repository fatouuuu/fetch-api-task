notes on fetch api:

The Fetch API is a promise-based interface for fetching resources 
asynchronously by making HTTP requests to servers from web browsers. 

The Fetch API provides a JavaScript interface for accessing and 
manipulating parts of the HTTP pipeline, such as requests and responses.

---> The URL
---> HTTP verb
---> The fetch() method itself

The fetch() method takes one mandatory argument, the path to the 
resource you want to fetch. It returns a Promise that resolves to 
the Response to that request, whether it is successful or not. 
You can also optionally pass in an init options object as the 
second argument. Once a response is retrieved, there are a number 
of methods available to define what the body content is and how it 
should be handled. 

requests: 
  - making a call to an existing endpoint that has some data
    held within it.
  - URL and HTTP verb (GET, POST(body/payload), PUT(body/payload),
    PATCH(body/payload), DELETE)

responses:
  - information that is returned back to us upon making a request.
  - can be positive(success) or negative(failure)

When using the fetch() method: 
- access the fetch fn 
- know the parameters to pass
- promises 

Handling promises 
--> .then and .catch
--> async and await 

Promise: a JS object used to handle asynchronous operations. It is used 
         to find out if the async operation is successfully completed or not.
        --> .then and .catch methods: 
        --> .then() - used with the callback when the promise is successfully 
            fulfilled or resolved.
        --> .catch() - used with the cb fn when the promise is rejected or 
            if an error occurs 


TASK: CREATING NEW ELEMENTS, ADDING CONTENT, APPENDING ELEMENTS TO OTHERS

BREAKDOWN: 
to-do 1: create a dynamic fn that will be used to purely create an 
         element and add content to the elements 
to-do 2: create a fn to append the added element to a desired destination 